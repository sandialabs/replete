/* Generated By:JJTree&JavaCC: Do not edit this line. RScriptParserGenerated.java */
package replete.scripting.rscript.parser.gen;

import java.lang.reflect.Field;
import java.io.StringReader;

import replete.scripting.rscript.parser.RScript;
import replete.scripting.rscript.parser.values.ConstantValue;
import replete.scripting.rscript.parser.values.ConstantValue.Null;
import replete.scripting.rscript.parser.values.FunctionValue;
import replete.scripting.rscript.parser.values.KeyValuePairValue;
import replete.scripting.rscript.parser.values.ListOrMapValue;
import replete.scripting.rscript.parser.values.OperatorValue;
import replete.scripting.rscript.parser.values.StartValue;
import replete.scripting.rscript.parser.values.UnitValue;
import replete.scripting.rscript.parser.values.VariableValue;

import replete.util.ReflectionUtil;

import javax.measure.unit.*;

/**
 * This parser attempts to be a relatively simple mathematical
 * expression parser.  The parser has support for these constructs:
 *  - numeric literals, integers, longs, floats, doubles, and e notation
 *  - boolean literals (true & false)
 *  - string literals
 *  - variables (identified by an identifier)
 *  - functions (identified by an identifier, (), and any arguments)
 *  - matrices (identified by [] and its elements)
 *  - array/matrix indexing (identified by var[idx(, idx)*])
 *  - mathematical && programming operators:
 *      mathematical: + - * / % (mod) ^ unary minus, unary plus
 *      logical: && || !
 *      equality: == !=
 *      relational: < > <= >=
 *      assignment: = += -= *= /=
 *      grouping: ()
 *  - units (for physics applications)
 * 
 * An identifier is a-zA-Z0-9 and can have _, $, and . in them.  They
 * cannot start with 0-9 nor a period (.).  They cannot end in a period.
 * They can end with any number of tick marks (single quotes, ') to identify
 * derivatives.
 * 
 * Right now the units supported are all those supported by the JScience 
 * library (SI prefixes are supported by JScience as well).  More units
 * can be added if necessary.
 *
 * This parser returns the root node of an abstract syntax tree that represents
 * the expression.
 * 
 * Implicit multiplication is not supported ("x = 3y").  This is due to the 
 * mixing of mathematical- and programming-language-related syntactical
 * concepts.  Namely, variables are supported like a programming language,
 * meaning 'x = yz' could either mean
 *    1) assign the value of the variable yz to x, or
 *    2) assign the value of the expression y * z to x
 * if this rule was not adopted.  Thus, 'x = yz' always implies #1, never #2.
 * Moreover, the expression 'b[2]' could wither mean
 *    1) the element at position 2 in the matrix b, or
 *    2) b multiplied by the matrix expression [2]
 * unless we remove implicit multiplication.
 *
 * Although this parser allows functions to have any name (e.g. "foobar(3, 4)"), 
 * only those functions implemented in the application would allow a parsed
 * expression to be evaluated.  Unknown functions simply provide the tree
 * node for the function with an instance of UnknownFunction, which does not
 * evaluate.
 * 
 * Assignment operators currently require that the left hand side operand be
 * either a variable, a function, or an array access.
 * 
 * The parser is generated by the JTree extension on top of JavaCC which 
 * automatically generates the AST classes for the developer.
 * 
 * Future possibilities:
 *  - left hand side of assignment operator does not need to be lvalue?
 *  - Or, at least disallow cos(3, 4) = <expr> from being a valid expression
 *    for consistency.
 *  - Ternary operator
 */

public class RScriptParserGenerated/*@bgen(jjtree)*/implements RScriptParserGeneratedTreeConstants, RScriptParserGeneratedConstants {/*@bgen(jjtree)*/
  protected JJTRScriptParserGeneratedState jjtree = new JJTRScriptParserGeneratedState();public static RScript parse(String source) throws ParseException {
        if(source == null) {
            throw new IllegalArgumentException("source to parse cannot be null.");
        }
        try {
            return parseInner(source);
        } catch(ParseException e) {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            String newMsg = e.getMessage().trim() + "\u005cnSource: " + source;
            ReflectionUtil.set(e, "detailMessage", newMsg);
            throw e;
        }
    }

    // Just used to wrap the inner parsing and TokenMgrError try/catch code for clarity.
    private static RScript parseInner(String source) throws ParseException {
        try {
            StringReader reader = new StringReader(source + "\u005cn");
            RScriptParserGenerated parser = new RScriptParserGenerated(reader);
            ASTStart startNode = parser.Start();
            return new RScript(source, startNode);
        } catch(TokenMgrError err) {
            ParseException p = new ParseException(err.getMessage());
            try {
                Field f = Throwable.class.getDeclaredField("cause");
                f.setAccessible(true);
                f.set(p, err);
            } catch(Exception e) {}
            throw p;
        }
    }

    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len)
                break;

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len)
            output.append(inputStr.substring(p));

        return output.toString();
    }

/***************************************************************
GRAMMAR START
***************************************************************/
  final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ASTStatement jjtn001 = new ASTStatement(JJTSTATEMENT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        Statement();
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(SEMI);
                 ASTStatement jjtn002 = new ASTStatement(JJTSTATEMENT);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
        try {
          Statement();
        } catch (Throwable jjte002) {
                 if (jjtc002) {
                   jjtree.clearNodeScope(jjtn002);
                   jjtc002 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte002 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte002;}
                 }
                 if (jjte002 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte002;}
                 }
                 {if (true) throw (Error)jjte002;}
        } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002,  1);
                 }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.jjtSetValue(new StartValue());
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Statement() throws ParseException {
    if (jj_2_2(2147483647)) {
      AssignExpression();
    } else if (jj_2_3(1)) {
      RightExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignExpression() throws ParseException {
                                        /*@bgen(jjtree) #Operator( 2) */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LValue();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NASSIGN:
        jj_consume_token(NASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.ASSIGN_NORMAL);
        break;
      case AASSIGN:
        jj_consume_token(AASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.ASSIGN_PLUS);
        break;
      case SASSIGN:
        jj_consume_token(SASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.ASSIGN_MINUS);
        break;
      case MASSIGN:
        jj_consume_token(MASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.ASTERISK_ASSIGN);
        break;
      case DASSIGN:
        jj_consume_token(DASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.FSLASH_ASSIGN);
        break;
      case UASSIGN:
        jj_consume_token(UASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.PERCENT_ASSIGN);
        break;
      case PASSIGN:
        jj_consume_token(PASSIGN);
                     jjtn000.jjtSetValue(OperatorValue.EXPON_ASSIGN);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
  }

  final public void RightExpression() throws ParseException {
    OrExpression();
  }

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(OR);
        AndExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.LOGICAL_OR);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(AND);
        EqualExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.LOGICAL_AND);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void EqualExpression() throws ParseException {
    RelationalExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(EQ);
          RelationalExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.EQUALITY_EQ_OP);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case NE:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(NE);
          RelationalExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.EQUALITY_NE_OP);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LT);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.RELATIONAL_LT_OP);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case LE:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LE);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.RELATIONAL_LE_OP);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case GT:
          ASTOperator jjtn003 = new ASTOperator(JJTOPERATOR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(GT);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
              jjtn003.jjtSetValue(OperatorValue.RELATIONAL_GT_OP);
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
      case GE:
          ASTOperator jjtn004 = new ASTOperator(JJTOPERATOR);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(GE);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn004,  2);
              jjtc004 = false;
              jjtn004.jjtSetValue(OperatorValue.RELATIONAL_GE_OP);
        } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte004;}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) throw (ParseException)jjte004;}
          }
          {if (true) throw (Error)jjte004;}
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  2);
          }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
          MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.ADD);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case MINUS:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
          MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.SUBTRACT);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(MUL);
          UnaryExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.MULTIPLY);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case DIV:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(DIV);
          UnaryExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.DIVIDE);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case MOD:
          ASTOperator jjtn003 = new ASTOperator(JJTOPERATOR);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(MOD);
          UnaryExpression();
              jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
              jjtn003.jjtSetValue(OperatorValue.MODULUS);
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PLUS);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
          jjtn001.jjtSetValue(OperatorValue.UPLUS);
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      break;
    case MINUS:
      ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(MINUS);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn002,  1);
          jjtc002 = false;
          jjtn002.jjtSetValue(OperatorValue.UMINUS);
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
      }
      }
      break;
    case NOT:
      ASTOperator jjtn003 = new ASTOperator(JJTOPERATOR);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(NOT);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn003,  1);
          jjtc003 = false;
          jjtn003.jjtSetValue(OperatorValue.LNOT);
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
      }
      break;
    case BNOT:
      ASTOperator jjtn004 = new ASTOperator(JJTOPERATOR);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(BNOT);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn004,  1);
          jjtc004 = false;
          jjtn004.jjtSetValue(OperatorValue.BNOT);
      } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
      } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004,  1);
      }
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_4(1)) {
        ExponentiationExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ExponentiationExpression() throws ParseException {
    UnitExpression();
    label_8:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_8;
      }
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(EXPON);
        UnaryExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.EXPON);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

/* Unary Expression With Units:
   A unit expression acts as a post-fix operator with
   precedence higher than +, -, *, /, and %, but lower 
   than ** (exponentiation), unary minus, unary plus, 
   and element []. */
  final public void UnitExpression() throws ParseException {
    String unit = "";
    if (jj_2_6(2147483647)) {
      ASTUnit jjtn001 = new ASTUnit(JJTUNIT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        ValueExpression();
        jj_consume_token(LBRC);
        unit = UnitsSpecification();
        jj_consume_token(RBRC);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.jjtSetValue(new UnitValue(Unit.valueOf(unit)));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_7(1)) {
      ValueExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ValueExpression() throws ParseException {
    if (jj_2_8(1)) {
      NonConstantExpandedExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case TRUE_LITERAL:
      case FALSE_LITERAL:
      case NULL_LITERAL:
        NumericOrBooleanOrNullConstant();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NonConstantExpandedExpression() throws ParseException {
    MemberOrElementAccessableExpandedExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LSQ:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(DOT);
          MemberExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.DOT);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case LSQ:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LSQ);
          Statement();
          jj_consume_token(RSQ);
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.INDEX);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NonConstantLimitedExpression() throws ParseException {
    MemberOrElementAccessableLimitedExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LSQ:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
          ASTOperator jjtn001 = new ASTOperator(JJTOPERATOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(DOT);
          MemberExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
              jjtn001.jjtSetValue(OperatorValue.DOT);
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case LSQ:
          ASTOperator jjtn002 = new ASTOperator(JJTOPERATOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(LSQ);
          Statement();
          jj_consume_token(RSQ);
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
              jjtn002.jjtSetValue(OperatorValue.INDEX);
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MemberOrElementAccessableExpandedExpression() throws ParseException {
    if (getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND) {
      Function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENTIFIER:
        Variable();
        break;
      case STRING_LITERAL:
        StringConstant();
        break;
      case LSQ:
        ListOrMapExpression();
        break;
      case LRND:
        jj_consume_token(LRND);
        Statement();
        jj_consume_token(RRND);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MemberOrElementAccessableLimitedExpression() throws ParseException {
    if (getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND) {
      Function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENTIFIER:
        Variable();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MemberExpression() throws ParseException {
    if (getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND) {
      Function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENTIFIER:
        Variable();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ListOrMapExpression() throws ParseException {
                                         /*@bgen(jjtree) ListOrMap */
    ASTListOrMap jjtn000 = new ASTListOrMap(JJTLISTORMAP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);jjtn000.jjtSetValue(new ListOrMapValue());
    try {
      jj_consume_token(LSQ);
      if (jj_2_14(1)) {
        if (jj_2_13(1)) {
          if (jj_2_9(2147483647)) {
            KeyValuePairExpression();
          } else if (jj_2_10(1)) {
            Statement();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_11;
            }
            jj_consume_token(COMMA);
            if (jj_2_11(2147483647)) {
              KeyValuePairExpression();
            } else if (jj_2_12(1)) {
              Statement();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
            jj_consume_token(COLON);
                    jjtn000.setEmptyMap(true);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        ;
      }
      jj_consume_token(RSQ);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void KeyValuePairExpression() throws ParseException {
                                               /*@bgen(jjtree) KeyValuePair */
    ASTKeyValuePair jjtn000 = new ASTKeyValuePair(JJTKEYVALUEPAIR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);jjtn000.jjtSetValue(new KeyValuePairValue());
    try {
      Statement();
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StringConstant() throws ParseException {
                                   /*@bgen(jjtree) Constant */
                                    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtn000.jjtSetValue(new ConstantValue(temp));
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void NumericOrBooleanOrNullConstant() throws ParseException {
                                                   /*@bgen(jjtree) Constant */
                                                    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
                                                    boolean jjtc000 = true;
                                                    jjtree.openNodeScope(jjtn000);Object value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
        value = RealConstant();
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetValue(new ConstantValue(value));
        break;
      case TRUE_LITERAL:
      case FALSE_LITERAL:
        value = BooleanConstant();
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetValue(new ConstantValue(value));
        break;
      case NULL_LITERAL:
        value = NullConstant();
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetValue(new ConstantValue(value));
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Object RealConstant() throws ParseException {
                          Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                    {if (true) return Long.parseLong(t.image);}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                    {if (true) return Double.parseDouble(t.image);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Boolean BooleanConstant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE_LITERAL:
      jj_consume_token(TRUE_LITERAL);
                       {if (true) return true;}
      break;
    case FALSE_LITERAL:
      jj_consume_token(FALSE_LITERAL);
                       {if (true) return false;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Null NullConstant() throws ParseException {
    jj_consume_token(NULL_LITERAL);
                       {if (true) return Null.NULL;}
    throw new Error("Missing return statement in function");
  }

  final public void Function() throws ParseException {
                    String id = "";
      ASTFunction jjtn001 = new ASTFunction(JJTFUNCTION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      id = Identifier();
          jjtn001.jjtSetValue(new FunctionValue(id));
      jj_consume_token(LRND);
      ArgumentList();
      jj_consume_token(RRND);
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
  }

  final public void ArgumentList() throws ParseException {
    if (jj_2_15(1)) {
      Statement();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        Statement();
      }
    } else {
      ;
    }
  }

  final public void Variable() throws ParseException {
                             /*@bgen(jjtree) Variable */
                              ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);String id = "";
    try {
      id = Identifier();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetValue(new VariableValue(id));
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LValue() throws ParseException {
   String unit = "";
    if (jj_2_16(2147483647)) {
      ASTUnit jjtn001 = new ASTUnit(JJTUNIT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        LValueWithoutUnits();
        jj_consume_token(LBRC);
        unit = UnitsSpecification();
        jj_consume_token(RBRC);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
          jjtn001.jjtSetValue(new UnitValue(Unit.valueOf(unit)));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_17(1)) {
      LValueWithoutUnits();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LValueWithoutUnits() throws ParseException {
    NonConstantLimitedExpression();
  }

  final public String Identifier() throws ParseException {
                        Token t;
    t = jj_consume_token(INDENTIFIER);
                        {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String UnitsSpecification() throws ParseException {
                                Token t;
    t = jj_consume_token(UNITS);
                  {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LSQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(PASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(UASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(DASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(MASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(SASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(AASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(NASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(LSQ)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(RSQ)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LBRC)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(LBRC)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RBRC)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(UNITS)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(EXPON)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(INDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LBRC)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(BNOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(LBRC)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RBRC)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(LRND)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RRND)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(FALSE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(TRUE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(NE)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public RScriptParserGeneratedTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x3f80000,0x0,0x0,0x80000000,0x80000000,0x60000000,0x60000000,0x0,0x0,0x0,0x0,0x0,0x7280,0x0,0x0,0x0,0x0,0x8800,0x8000,0x8000,0x4000000,0x10000000,0x7280,0x280,0x3000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x10,0x8,0x4,0x4,0x3,0x3,0x60,0x60,0x680,0x680,0x1860,0x0,0x4100,0x4100,0x4100,0x4100,0x14000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RScriptParserGenerated(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RScriptParserGenerated(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RScriptParserGeneratedTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RScriptParserGenerated(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RScriptParserGeneratedTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RScriptParserGenerated(RScriptParserGeneratedTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RScriptParserGeneratedTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//    int checkMatrixCount(int first, int cur) throws ParseException {
//        if(first == -1) {
//            first = cur;
//        } else if(cur != first) {
//            throw new ParseException("Matrix does not have equal number of columns in each row.");
//        }
//        return first;
//    }
}
