
options
{
    OUTPUT_DIRECTORY = "../gen";
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_EXCEPTION = "ParseException";
    NODE_DEFAULT_VOID = true;          // Only create Node classes for the #Tokens
    NODE_CLASS = "ASTNode";
}

PARSER_BEGIN(RScriptParserGenerated)

package replete.scripting.rscript.parser.gen;

import java.lang.reflect.Field;
import java.io.StringReader;

import replete.scripting.rscript.parser.RScript;
import replete.scripting.rscript.parser.values.ConstantValue;
import replete.scripting.rscript.parser.values.ConstantValue.Null;
import replete.scripting.rscript.parser.values.FunctionValue;
import replete.scripting.rscript.parser.values.KeyValuePairValue;
import replete.scripting.rscript.parser.values.ListOrMapValue;
import replete.scripting.rscript.parser.values.OperatorValue;
import replete.scripting.rscript.parser.values.StartValue;
import replete.scripting.rscript.parser.values.UnitValue;
import replete.scripting.rscript.parser.values.VariableValue;

import replete.util.ReflectionUtil;

import javax.measure.unit.*;

/**
 * This parser attempts to be a relatively simple mathematical
 * expression parser.  The parser has support for these constructs:
 *  - numeric literals, integers, longs, floats, doubles, and e notation
 *  - boolean literals (true & false)
 *  - string literals
 *  - variables (identified by an identifier)
 *  - functions (identified by an identifier, (), and any arguments)
 *  - matrices (identified by [] and its elements)
 *  - array/matrix indexing (identified by var[idx(, idx)*])
 *  - mathematical && programming operators:
 *      mathematical: + - * / % (mod) ^ unary minus, unary plus
 *      logical: && || !
 *      equality: == !=
 *      relational: < > <= >=
 *      assignment: = += -= *= /=
 *      grouping: ()
 *  - units (for physics applications)
 * 
 * An identifier is a-zA-Z0-9 and can have _, $, and . in them.  They
 * cannot start with 0-9 nor a period (.).  They cannot end in a period.
 * They can end with any number of tick marks (single quotes, ') to identify
 * derivatives.
 * 
 * Right now the units supported are all those supported by the JScience 
 * library (SI prefixes are supported by JScience as well).  More units
 * can be added if necessary.
 *
 * This parser returns the root node of an abstract syntax tree that represents
 * the expression.
 * 
 * Implicit multiplication is not supported ("x = 3y").  This is due to the 
 * mixing of mathematical- and programming-language-related syntactical
 * concepts.  Namely, variables are supported like a programming language,
 * meaning 'x = yz' could either mean
 *    1) assign the value of the variable yz to x, or
 *    2) assign the value of the expression y * z to x
 * if this rule was not adopted.  Thus, 'x = yz' always implies #1, never #2.
 * Moreover, the expression 'b[2]' could wither mean
 *    1) the element at position 2 in the matrix b, or
 *    2) b multiplied by the matrix expression [2]
 * unless we remove implicit multiplication.
 *
 * Although this parser allows functions to have any name (e.g. "foobar(3, 4)"), 
 * only those functions implemented in the application would allow a parsed
 * expression to be evaluated.  Unknown functions simply provide the tree
 * node for the function with an instance of UnknownFunction, which does not
 * evaluate.
 * 
 * Assignment operators currently require that the left hand side operand be
 * either a variable, a function, or an array access.
 * 
 * The parser is generated by the JTree extension on top of JavaCC which 
 * automatically generates the AST classes for the developer.
 * 
 * Future possibilities:
 *  - left hand side of assignment operator does not need to be lvalue?
 *  - Or, at least disallow cos(3, 4) = <expr> from being a valid expression
 *    for consistency.
 *  - Ternary operator
 */

public class RScriptParserGenerated {
    public static RScript parse(String source) throws ParseException {
        if(source == null) {
            throw new IllegalArgumentException("source to parse cannot be null.");
        }
        try {
            return parseInner(source);
        } catch(ParseException e) {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            String newMsg = e.getMessage().trim() + "\nSource: " + source;
            ReflectionUtil.set(e, "detailMessage", newMsg);
            throw e;
        }
    }
    
    // Just used to wrap the inner parsing and TokenMgrError try/catch code for clarity.
    private static RScript parseInner(String source) throws ParseException {
        try {
            StringReader reader = new StringReader(source + "\n");
            RScriptParserGenerated parser = new RScriptParserGenerated(reader);
            ASTStart startNode = parser.Start();
            return new RScript(source, startNode);
        } catch(TokenMgrError err) {
            ParseException p = new ParseException(err.getMessage());
            try {
                Field f = Throwable.class.getDeclaredField("cause");
                f.setAccessible(true);
                f.set(p, err);
            } catch(Exception e) {}
            throw p;
        }
    }

    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len)
                break;

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len)
            output.append(inputStr.substring(p));

        return output.toString();
    }

//    int checkMatrixCount(int first, int cur) throws ParseException {
//        if(first == -1) {
//            first = cur;
//        } else if(cur != first) {
//            throw new ParseException("Matrix does not have equal number of columns in each row.");
//        }
//        return first;
//    }
}
PARSER_END(RScriptParserGenerated)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>         // Should include EOF, will add \n in input until this is fixed.
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

<DEFAULT> TOKEN:
{
    <INTEGER_LITERAL: <DECIMAL_LITERAL>> |
    <#DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*> |
    <FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
    > |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+> |
    <STRING_LITERAL:
        "\""
        ( (~["\"","\\","\n","\r"])
        | ("\\" ["n","t","b","r","f","\\","'","\""] )
        )*
        "\""
    >
}

<DEFAULT> TOKEN:
{
    <TRUE_LITERAL:  "true">  |
    <FALSE_LITERAL: "false"> |
    <NULL_LITERAL:  "null">
}

<DEFAULT> TOKEN:
{
    <INDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(<TICKMARK>)*> |
    <#LETTER: ["A"-"Z", "a"-"z", "_", "$"]> |
    <#DIGIT: ["0"-"9"] > | 
    <#TICKMARK: "'" >
}

<DEFAULT> TOKEN:
{
    < NASSIGN: "="   > |
    < AASSIGN: "+="  > |
    < SASSIGN: "-="  > |
    < MASSIGN: "*="  > |
    < DASSIGN: "/="  > |
    < UASSIGN: "%="  > |
    < PASSIGN: "**=" > |
    
    < COMMA: ","  > |
    < SEMI:  ";"  > |
    < COLON: ":"  > |
    < GT:    ">"  > |
    < LT:    "<"  > |
    < EQ:    "==" > |
    < LE:    "<=" > |
    < GE:    ">=" > |
    < NE:    "!=" > |
    < AND:   "&&" > |
    < OR:    "||" > |
    < PLUS:  "+"  > |
    < MINUS: "-"  > |
    < MUL:   "*"  > |
    < DOT:   "."  > |
    < DIV:   "/"  > |
    < MOD:   "%"  > |
    < NOT:   "!"  > |
    < BNOT:  "~"  > |
    < EXPON: "**" > |
    < LSQ:   "["  > |
    < RSQ:   "]"  > |
    < LRND:  "("  > |
    < RRND:  ")"  >
}

/* Switches to the IN_UNITS lexical state for different parsing of the unit expressions */
<DEFAULT> TOKEN:
{
    < LBRC: "{" > : IN_UNITS
}

/* Switches back to the DEFAULT lexical state for normal parsing */
<IN_UNITS> TOKEN:
{
    < RBRC: "}" > : DEFAULT
}

/* Unit expressions are allowed to be a lot less structured, as the
   parsing will be done by JScience, not this parser. Only those characters
   that could conceivably be present in unit expressions are allowed here. */
<IN_UNITS> TOKEN:
{
    < UNITS: (["A"-"Z", "a"-"z", "_", "0"-"9", "(", ")", "+", "-", "*", "/", "^"])+ >
}


/***************************************************************
GRAMMAR START
***************************************************************/

ASTStart Start() #Start : {}
{
    Statement() #Statement(1)
    (
        LOOKAHEAD(2) 
        <SEMI> Statement() #Statement(1)
    )* 
    [<SEMI>]
    <EOF>
    {
        jjtThis.jjtSetValue(new StartValue()); 
        return jjtThis;
    }
}

void Statement() : {}   /* Can't put #Statement here, or other paths would create Statement nodes */
{
    LOOKAHEAD(LValue() (<NASSIGN>|<AASSIGN>|<SASSIGN>|<MASSIGN>|<DASSIGN>|<UASSIGN>|<PASSIGN>)) 
    AssignExpression()
      |
    RightExpression()
}

void AssignExpression() #Operator(2) : {}
{    
    LValue()
    (
        <NASSIGN>  { jjtThis.jjtSetValue(OperatorValue.ASSIGN_NORMAL); }
          |
        <AASSIGN>  { jjtThis.jjtSetValue(OperatorValue.ASSIGN_PLUS); }
          |
        <SASSIGN>  { jjtThis.jjtSetValue(OperatorValue.ASSIGN_MINUS); }
          |
        <MASSIGN>  { jjtThis.jjtSetValue(OperatorValue.ASTERISK_ASSIGN); }
          |
        <DASSIGN>  { jjtThis.jjtSetValue(OperatorValue.FSLASH_ASSIGN); }
          |
        <UASSIGN>  { jjtThis.jjtSetValue(OperatorValue.PERCENT_ASSIGN); }
          |
        <PASSIGN>  { jjtThis.jjtSetValue(OperatorValue.EXPON_ASSIGN); }
    )
    Statement()
}

void RightExpression() : {}
{
    OrExpression()
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR> AndExpression()
            { jjtThis.jjtSetValue(OperatorValue.LOGICAL_OR); }
        ) #Operator(2)
    )*
}

void AndExpression() : {}
{
    EqualExpression()
    (
        (<AND> EqualExpression()
            { jjtThis.jjtSetValue(OperatorValue.LOGICAL_AND); }
        ) #Operator(2)
    )*
}

void EqualExpression() : {}
{
    RelationalExpression()
    (
        (<EQ> RelationalExpression()
            { jjtThis.jjtSetValue(OperatorValue.EQUALITY_EQ_OP); }
        ) #Operator(2)
          |
        (<NE> RelationalExpression()
            { jjtThis.jjtSetValue(OperatorValue.EQUALITY_NE_OP); }
        ) #Operator(2)
    )*
}

void RelationalExpression() : {}
{
    AdditiveExpression()
    (
        (<LT> AdditiveExpression()
            { jjtThis.jjtSetValue(OperatorValue.RELATIONAL_LT_OP); }
        ) #Operator(2)
          |
        (<LE> AdditiveExpression()
            { jjtThis.jjtSetValue(OperatorValue.RELATIONAL_LE_OP); }
        ) #Operator(2)
          |
        (<GT> AdditiveExpression()
            { jjtThis.jjtSetValue(OperatorValue.RELATIONAL_GT_OP); }
        ) #Operator(2)
          |
        (<GE> AdditiveExpression()
            { jjtThis.jjtSetValue(OperatorValue.RELATIONAL_GE_OP); }
        ) #Operator(2)
    )*
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        (<PLUS> MultiplicativeExpression()
            { jjtThis.jjtSetValue(OperatorValue.ADD); }
        ) #Operator(2)
          |
        (<MINUS> MultiplicativeExpression()
            { jjtThis.jjtSetValue(OperatorValue.SUBTRACT); }
        ) #Operator(2)
    )*
}

void MultiplicativeExpression() : {}
{
    UnaryExpression()
    (
        (<MUL> UnaryExpression()
            { jjtThis.jjtSetValue(OperatorValue.MULTIPLY); }
        ) #Operator(2)
          |
        (<DIV> UnaryExpression()
            { jjtThis.jjtSetValue(OperatorValue.DIVIDE); }
        ) #Operator(2)
          |
        (<MOD> UnaryExpression()
            { jjtThis.jjtSetValue(OperatorValue.MODULUS); }
        ) #Operator(2)
    )*
}

void UnaryExpression() : {}
{
    (<PLUS> UnaryExpression()
        { jjtThis.jjtSetValue(OperatorValue.UPLUS); }
    ) #Operator(1)
      |
    (<MINUS> UnaryExpression()
        { jjtThis.jjtSetValue(OperatorValue.UMINUS); }
    ) #Operator(1)
      |
    (<NOT> UnaryExpression()
        { jjtThis.jjtSetValue(OperatorValue.LNOT); }
    ) #Operator(1)
      |
    (<BNOT> UnaryExpression()
        { jjtThis.jjtSetValue(OperatorValue.BNOT); }
    ) #Operator(1)
      |
    ExponentiationExpression()
}

void ExponentiationExpression() : {}
{
    UnitExpression()
    (
        LOOKAHEAD(2)
        (<EXPON> UnaryExpression()
            { jjtThis.jjtSetValue(OperatorValue.EXPON); }
        ) #Operator(2)
    )*
}

/* Unary Expression With Units:
   A unit expression acts as a post-fix operator with
   precedence higher than +, -, *, /, and %, but lower 
   than ** (exponentiation), unary minus, unary plus, 
   and element []. */
   
void UnitExpression() : {
    String unit = "";
}
{
    LOOKAHEAD(ValueExpression() <LBRC>)
    (ValueExpression() <LBRC> unit = UnitsSpecification() <RBRC>
        { jjtThis.jjtSetValue(new UnitValue(Unit.valueOf(unit))); }
    ) #Unit
      | 
    ValueExpression()
}

void ValueExpression() : {}
{
    NonConstantExpandedExpression()    /* Includes "strings" and (<statement>) */
      |
    NumericOrBooleanOrNullConstant()
}

void NonConstantExpandedExpression() : {}
{
    MemberOrElementAccessableExpandedExpression()   /* Includes "strings" and (<statement>) */
    (
        (<DOT> MemberExpression()
            { jjtThis.jjtSetValue(OperatorValue.DOT); }
        ) #Operator(2)
          |
        (<LSQ> Statement() <RSQ>
            { jjtThis.jjtSetValue(OperatorValue.INDEX); }
        ) #Operator(2)
    )*
}

void NonConstantLimitedExpression() : {}   /* No "strings" nor (<statement>) */
{
    MemberOrElementAccessableLimitedExpression()   /* No "strings" nor (<statement>) */
    (
        (<DOT> MemberExpression()
            { jjtThis.jjtSetValue(OperatorValue.DOT); }
        ) #Operator(2)
          |
        (<LSQ> Statement() <RSQ>
            { jjtThis.jjtSetValue(OperatorValue.INDEX); }
        ) #Operator(2)
    )*
}

void MemberOrElementAccessableExpandedExpression() : {}
{
    LOOKAHEAD({getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND})
    Function()
      |
    Variable()
      |
    StringConstant()
      |
    ListOrMapExpression()
      |
    <LRND> Statement() <RRND>
}

void MemberOrElementAccessableLimitedExpression() : {}
{
    LOOKAHEAD({getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND})
    Function()
      |
    Variable()
}

void MemberExpression() : {}
{
    LOOKAHEAD({getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND})
    Function()
      |
    Variable()
}

void ListOrMapExpression() #ListOrMap : {
    jjtThis.jjtSetValue(new ListOrMapValue());
}
{
    <LSQ>
      (
          (
              (LOOKAHEAD(Statement() <COLON>) KeyValuePairExpression() | Statement())
              (
                  <COMMA>
                  (LOOKAHEAD(Statement() <COLON>) KeyValuePairExpression() | Statement())
              )*
          )
            |
          <COLON> { jjtThis.setEmptyMap(true); }
      )?
    <RSQ> 
}

void KeyValuePairExpression() #KeyValuePair : {
    jjtThis.jjtSetValue(new KeyValuePairValue());
}
{
    Statement() <COLON> Statement()
}

void StringConstant() #Constant : { Token t; }
{
    t = <STRING_LITERAL>
    {
        String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtThis.jjtSetValue(new ConstantValue(temp));
    }
}

void NumericOrBooleanOrNullConstant() #Constant : { Object value; }
{
    value = RealConstant()     { jjtThis.jjtSetValue(new ConstantValue(value)); }
      |
    value = BooleanConstant()  { jjtThis.jjtSetValue(new ConstantValue(value)); }
      |
    value = NullConstant()     { jjtThis.jjtSetValue(new ConstantValue(value)); }
}

Object RealConstant() : { Token t; }
{
    t = <INTEGER_LITERAL>         { return Long.parseLong(t.image); }
      |
    t = <FLOATING_POINT_LITERAL>  { return Double.parseDouble(t.image); }
}

Boolean BooleanConstant() : {}
{
    <TRUE_LITERAL>   { return true; }    
      | 
    <FALSE_LITERAL>  { return false; }
}

Null NullConstant() : {}
{
    <NULL_LITERAL>   { return Null.NULL; }    
}

void Function() : { String id = ""; }
{
    (id = Identifier()
        { jjtThis.jjtSetValue(new FunctionValue(id)); }
        <LRND> ArgumentList() <RRND>
    ) #Function
}

void ArgumentList() : {}
{
    [Statement() (<COMMA> Statement())*]
}

void Variable() #Variable : { String id = ""; }
{
    id = Identifier()  { jjtThis.jjtSetValue(new VariableValue(id)); }
}

void LValue() : {
   String unit = "";
}
{
    LOOKAHEAD(LValueWithoutUnits() <LBRC>)
    (LValueWithoutUnits() <LBRC> unit = UnitsSpecification() <RBRC>
        { jjtThis.jjtSetValue(new UnitValue(Unit.valueOf(unit))); }
    ) #Unit
      | 
    LValueWithoutUnits()
}

void LValueWithoutUnits() : {}
{
    NonConstantLimitedExpression()
}

String Identifier() : { Token t; }
{
    t = <INDENTIFIER> { return t.image; }
}

String UnitsSpecification() : { Token t; }
{
    t = <UNITS> { return t.image; }
}
