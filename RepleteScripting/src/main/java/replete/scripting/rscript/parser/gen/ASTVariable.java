/* Generated By:JJTree: Do not edit this line. ASTVarNode.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,
 * NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */

package replete.scripting.rscript.parser.gen;

import replete.scripting.rscript.parser.values.VariableValue;

public class ASTVariable extends ASTNode<VariableValue> {


    ///////////
    // FIELD //
    ///////////

    private int order;


    ////////////////////
    // AUTO-GENERATED //
    ////////////////////

    public ASTVariable(VariableValue value) {
        super(value, RScriptParserGeneratedTreeConstants.JJTVARIABLE);
    }

    public ASTVariable(int id) {
        super(id);
    }

    public ASTVariable(RScriptParserGenerated p, int id) {
        super(p, id);
    }

    /** Accept the visitor. **/
    @Override
    public Object jjtAccept(RScriptParserGeneratedVisitor visitor, Object data) throws ParseException {
        return visitor.visit(this, data);
    }


    ////////////
    // CUSTOM //
    ////////////

    public int getOrder() {
        return order;
    }

    public String getVariableName() {
        VariableValue value = getValue();
        return value.getName();
    }

    public String getVariableNameWithOrder() {
        return getVariableName();
    }

    @Override
    public void jjtSetValue(Object o) {
        super.jjtSetValue(o);
        VariableValue value = (VariableValue) o;
        String str = value.getName();
        order = 0;
        while(str.endsWith("'")) {
            order++;
            str = str.substring(0, str.length() - 1);
        }
    }

    // This method should produce the same validation as what
    // the JTree grammar contains.
    public static boolean isValidVariableName(String name) {
        return isValidVariableName(name, false, false);
    }
    public static boolean isValidVariableName(String name, boolean allowDollar, boolean allowTickMarks) {
        String letter = "A-Za-z_";
        if(allowDollar) {
            letter += "\\$";
        }
        String digit = "0-9";

        String pattern = "[" + letter + "][" + letter + digit + "]*";

        if(allowTickMarks) {
            String tickMark = "'";
            pattern += tickMark + "*";
        }

        return name.matches(pattern);
    }
}
/* JavaCC - OriginalChecksum=07024c2825bef86ec21e5a3f8ff5a0ff (do not edit this line) */
