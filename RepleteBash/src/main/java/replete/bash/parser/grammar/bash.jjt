
options
{
    OUTPUT_DIRECTORY = "../gen";
    STATIC = false;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
    VISITOR_EXCEPTION = "ParseException";
    NODE_DEFAULT_VOID = true;          // Only create Node classes for the #Tokens
    NODE_CLASS = "ASTNodeBase";
}

PARSER_BEGIN(ExpressionParser)

package replete.bash.parser.gen;

import java.lang.reflect.Field;
import java.io.StringReader;

import replete.bash.evaluation.FunctionList;
import replete.bash.evaluation.Function;

import replete.util.ReflectionUtil;

import javax.measure.unit.*;

/**
 * This parser attempts to be a relatively simple mathematical
 * expression parser.  The parser has support for these constructs:
 *  - numeric literals, integers, longs, floats, doubles, and e notation
 *  - boolean literals (true & false)
 *  - string literals
 *  - variables (identified by an identifier)
 *  - functions (identified by an identifier, (), and any arguments)
 *  - matrices (identified by [] and its elements)
 *  - array/matrix indexing (identified by var[idx(, idx)*])
 *  - mathematical && programming operators:
 *      mathematical: + - * / % (mod) ^ unary minus, unary plus
 *      logical: && || !
 *      equality: == !=
 *      relational: < > <= >=
 *      assignment: = += -= *= /=
 *      vector: . ^^ (dot, cross - not impl)
 *      grouping: ()
 *  - units (for physics applications)
 * 
 * An identifier is a-zA-Z0-9 and can have _, $, and . in them.  They
 * cannot start with 0-9 nor a period (.).  They cannot end in a period.
 * They can end with any number of tick marks (single quotes, ') to identify
 * derivatives.
 * 
 * Right now the units supported are all those supported by the JScience 
 * library (SI prefixes are supported by JScience as well).  More units
 * can be added if necessary.
 *
 * This parser returns the root node of an abstract syntax tree that represents
 * the expression.
 * 
 * Implicit multiplication is not supported ("x = 3y").  This is due to the 
 * mixing of mathematical- and programming-language-related syntactical
 * concepts.  Namely, variables are supported like a programming language,
 * meaning 'x = yz' could either mean
 *    1) assign the value of the variable yz to x, or
 *    2) assign the value of the expression y * z to x
 * if this rule was not adopted.  Thus, 'x = yz' always implies #1, never #2.
 * Moreover, the expression 'b[2]' could wither mean
 *    1) the element at position 2 in the matrix b, or
 *    2) b multiplied by the matrix expression [2]
 * unless we remove implicit multiplication.
 *
 * Although this parser allows functions to have any name (e.g. "foobar(3, 4)"), 
 * only those functions implemented in the application would allow a parsed
 * expression to be evaluated.  Unknown functions simply provide the tree
 * node for the function with an instance of UnknownFunction, which does not
 * evaluate.
 * 
 * Assignment operators currently require that the left hand side operand be
 * either a variable, a function, or an array access.
 * 
 * The parser is generated by the JTree extension on top of JavaCC which 
 * automatically generates the AST classes for the developer.
 * 
 * Future possibilities:
 *  - dot operator elevated to full operator, instead of identifier character
 *  - list indexing elevated to full operator, trailing any expression
 *  - left hand side of assignment operator does not need to be lvalue?
 *  - Or, at least disallow cos(3, 4) = <expr> from being a valid expression
 *    for consistency.
 *  - Ternary operator
 */

public class ExpressionParser {
    public static ASTNodeBase parse(String line) throws ParseException {
        if(line == null) {
            throw new IllegalArgumentException("Line to parse cannot be null.");
        }
        try {
            return parseInner(line);
        } catch(ParseException e) {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            String newMsg = e.getMessage().trim() + "\nSource Line: " + line;
            ReflectionUtil.set(e, "detailMessage", newMsg);
            throw e;
        }
    }
    
    // Just used to wrap the inner parsing and TokenMgrError try/catch code for clarity.
    private static ASTNodeBase parseInner(String line) throws ParseException {
        try {
            ExpressionParser parser = new ExpressionParser(new StringReader(line + "\n"));
            Node startNode = parser.Start();
            ASTNodeBase firstNode = (ASTNodeBase) startNode.jjtGetChild(0);
            firstNode.setSource(line);
            return firstNode;
        } catch(TokenMgrError err) {
            ParseException p = new ParseException(err.getMessage());
            try {
                Field f = Throwable.class.getDeclaredField("cause");
                f.setAccessible(true);
                f.set(p, err);
            } catch(Exception e) {}
            throw p;
        }
    }

    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len)
                break;

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len)
            output.append(inputStr.substring(p));

        return output.toString();
    }

    int checkMatrixCount(int first, int cur) throws ParseException {
        if(first == -1) {
            first = cur;
        } else if(cur != first) {
            throw new ParseException("Matrix does not have equal number of columns in each row.");
        }
        return first;
    }
}
PARSER_END(ExpressionParser)

/***************************************************************
SKIP
***************************************************************/

<DEFAULT> SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"

  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>         // Should include EOF, will add \n in input until this is fixed.
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


/***************************************************************
TOKENS
***************************************************************/

<DEFAULT> TOKEN:
{
    <INTEGER_LITERAL: <DECIMAL_LITERAL>> |
    <#DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])*> |
    <FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
    > |
    <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+> |
    <STRING_LITERAL:
        "\""
        ( (~["\"","\\","\n","\r"])
        | ("\\" ["n","t","b","r","f","\\","'","\""] )
        )*
        "\""
    >
}

<DEFAULT> TOKEN:
{
    <TRUE_LITERAL:  "true"> |
    <FALSE_LITERAL: "false">
}

<DEFAULT> TOKEN:
{
    <INDENTIFIER: <LETTER>((<LETTER>|<DIGIT>|("."<LETTER>))*)?(<TICKMARK>)*> |
    <#LETTER: ["A"-"Z", "a"-"z", "_", "$"]> |
    <#DIGIT: ["0"-"9"] > | 
    <#TICKMARK: "'" >
}

<DEFAULT> TOKEN:
{
    < ASSIGN: <NASSIGN>|<AASSIGN>|<SASSIGN>|<MASSIGN>|<DASSIGN>|<PASSIGN> > |

    < #NASSIGN: "="  > |
    < #AASSIGN: "+=" > |
    < #SASSIGN: "-=" > |
    < #MASSIGN: "*=" > |
    < #DASSIGN: "/=" > |
    < #PASSIGN: "^=" > |
    
    < COMMA: ","  > |
    < SEMI:  ";"  > |
    < GT:    ">"  > |
    < LT:    "<"  > |
    < EQ:    "==" > |
    < LE:    "<=" > |
    < GE:    ">=" > |
    < NE:    "!=" > |
    < AND:   "&&" > |
    < OR:    "||" > |
    < PLUS:  "+"  > |
    < MINUS: "-"  > |
    < MUL:   "*"  > |
    < DOT:   "."  > |
    < DIV:   "/"  > |
    < MOD:   "%"  > |
    < NOT:   "!"  > |
    < POWER: "^"  > |
    < CROSS: "^^" > |
    < LSQ:   "["  > |
    < RSQ:   "]"  > |
    < LRND:  "("  > |
    < RRND:  ")"  >
}

/* Switches to the IN_UNITS lexical state for different parsing of the unit expressions */
<DEFAULT> TOKEN:
{
    < LBRC: "{" > : IN_UNITS
}

/* Switches back to the DEFAULT lexical state for normal parsing */
<IN_UNITS> TOKEN:
{
    < RBRC: "}" > : DEFAULT
}

/* Unit expressions are allowed to be a lot less structured, as the
   parsing will be done by JScience, not this parser. Only those characters
   that could conceivably be present in unit expressions are allowed here. */
<IN_UNITS> TOKEN:
{
    < UNITS: (["A"-"Z", "a"-"z", "_", "0"-"9", "(", ")", "+", "-", "*", "/", "^"])+ >
}


/***************************************************************
GRAMMAR START
***************************************************************/

ASTStart Start() #Start : {}
{
    Expression() <EOF>
    {
        return jjtThis;
    }
}

void Expression() : {}
{
    LOOKAHEAD(LValue() <ASSIGN>) AssignExpression()
      |
    RightExpression()
}

void AssignExpression() #OpNode(2) : {
    Token t = null;
}
{    
    LValue() t = <ASSIGN> Expression()
    {
        jjtThis.jjtSetValue(FunctionList.get(t.image));
    }
}

void RightExpression() : {}
{
    OrExpression()
}

void OrExpression() : {}
{
    AndExpression()
    (
        (<OR> AndExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_OR));
            }
        ) #OpNode(2)
    )*
}

void AndExpression() : {}
{
    EqualExpression()
    (
        (<AND> EqualExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_AND));
            }
        ) #OpNode(2)
    )*
}

void EqualExpression() : {}
{
    RelationalExpression()
    (
        (<NE> RelationalExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_NE));
            }
        ) #OpNode(2)
          |
        (<EQ> RelationalExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_EQ));
            }
        ) #OpNode(2)
    )*
}

void RelationalExpression() : {}
{
    AdditiveExpression()
    (
        (<LT> AdditiveExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_LT));
            }
        ) #OpNode(2)
          |
        (<GT> AdditiveExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_GT));
            }
        ) #OpNode(2)
          |
        (<LE> AdditiveExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_LE));
            }
        ) #OpNode(2)
          |
        (<GE> AdditiveExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_GE));
            }
        ) #OpNode(2)
    )*
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()
    (
        (<PLUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_ADD));
            }
        ) #OpNode(2)
          |
        (<MINUS> MultiplicativeExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_SUBTRACT));
            }
        ) #OpNode(2)
    )*
}

void MultiplicativeExpression() : {}
{
    UnaryExpression()
    (
        (PowerExpression()
            {
                throw new ParseException("Implicit multiplication not allowed.");
            }
        ) #FunNode(2)
          |
        (<MUL> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_MULTIPLY));
            }
        ) #OpNode(2)
          |
        (<DOT> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_DOT));
            }
        ) #OpNode(2)
          |
        (<CROSS> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_CROSS));
            }
        ) #OpNode(2)
          |
        (<DIV> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_DIVIDE));
            }
        ) #OpNode(2)
          |
        (<MOD> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_MOD));
            }
        ) #OpNode(2)
    )*
}

/* Unary Expression With Units:
   Units act as a post-fix operator with precedence
   higher than +, -, *, /, and %, but lower than 
   ^, unary minus, unary plus, and element []. */
   
void UnaryExpression() : {
    String units = "";
}
{
    LOOKAHEAD(UnaryExpressionWithoutUnits() <LBRC>)
    (UnaryExpressionWithoutUnits() <LBRC> units = UnitsSpecification() <RBRC>
        {
            jjtThis.jjtSetValue(Unit.valueOf(units));
        }
    ) #UnitNode
      | 
    UnaryExpressionWithoutUnits()
}

void UnaryExpressionWithoutUnits() : {}
{
    (<PLUS> UnaryExpression()
        {
            jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_UPLUS));
        }
    ) #OpNode(1)
      |
    (<MINUS> UnaryExpression()
        {
            jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_UMINUS));
        }
    ) #OpNode(1)
      |
    (<NOT> UnaryExpression()
        {
            jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_NOT));
        }
    ) #OpNode(1)
      |
    PowerExpression()
}

void PowerExpression() : {}
{
    UnaryExpressionNotPlusMinus()
    [
        (<POWER> UnaryExpression()
            {
                jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_POWER));
            }
        ) #OpNode(2)
    ]
}

void UnaryExpressionNotPlusMinus() : {}
{
    AnyConstant()
      |
    LOOKAHEAD(ArrayAccess()) ArrayAccess()
      |
    LOOKAHEAD({getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND})
    Function()
      |
    Variable()
      |
    <LRND> Expression() <RRND> 
      |
    MatrixExpression()
}

void ListExpression() #ListNode : {
    jjtThis.jjtSetValue("LIST");
}
{
    <LSQ> Expression() ( <COMMA> Expression() )* <RSQ> 
}

void MatrixExpression() #MatrixNode : {
    jjtThis.jjtSetValue("MATRIX");
}
{
    {
        int firstRowElemCount = -1;
        int rowElemCount = 0;
        int rowCount = 0;
    }
    <LSQ>
        Expression() {rowElemCount++; rowCount++;}
        ( 
            <COMMA> Expression() {rowElemCount++;}
              |
            <SEMI> Expression()
            {
                firstRowElemCount = checkMatrixCount(firstRowElemCount, rowElemCount);
                rowElemCount = 1;
                rowCount++;
            } 
        )* 
    <RSQ>
    {
        // COMMENTED OUT FROM ABOVE DUE TO CONFLICTS WITH +/-: | Expression() {rowElemCount++;}
        firstRowElemCount = checkMatrixCount(firstRowElemCount, rowElemCount);
        jjtThis.setDimensions(rowCount, firstRowElemCount);
    }
}

void LValue() : {
   String units = "";
}
{
    LOOKAHEAD(LValueWithoutUnits() <LBRC>)
    (LValueWithoutUnits() <LBRC> units = UnitsSpecification() <RBRC>
        {
            jjtThis.jjtSetValue(Unit.valueOf(units));
        }
    ) #UnitNode
      | 
    LValueWithoutUnits()
}

void LValueWithoutUnits() : {}
{
    LOOKAHEAD(ArrayAccess()) ArrayAccess()
      |
    LOOKAHEAD(Function()) Function()
      |
    Variable()
}

void ArrayAccess() : {}
{
    Variable() ListExpression()
    {
        jjtThis.jjtSetValue(FunctionList.get(FunctionList.OP_ELEMENT));
    }
    #OpNode(2)
}
void Variable() #VarNode : {
    String identString = "";
}
{
    identString = Identifier()
    {
        jjtThis.jjtSetValue(identString);
    }
}

void Function() : {
    String identString = "";
}
{
    (identString = Identifier()
        {
            jjtThis.jjtSetValue(FunctionList.getOrUnknown(identString));
        }
        <LRND> ArgumentList() <RRND>
    ) #FunNode
}

void ArgumentList() : {}
{
    [Expression() (<COMMA> Expression())*]
}

String Identifier() : {
  Token t;
}
{
    t = <INDENTIFIER>
    {
        return t.image;
    }
}

void AnyConstant() #Constant : {
    Token t;
    Object value;
}
{
    t = <STRING_LITERAL>
    {
        String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtThis.jjtSetValue(temp);
    }
      |
    value = RealConstant()
    {
        jjtThis.jjtSetValue(value);
    }
      |
    value = BooleanLiteral()
    {
        jjtThis.jjtSetValue(value);
    }
}

Object RealConstant() : {
  Token t;
}
{
    t = <INTEGER_LITERAL>
    {
        return Long.parseLong(t.image);
    }
      |
    t = <FLOATING_POINT_LITERAL>
    {
        return Double.parseDouble(t.image);
    }
}

Boolean BooleanLiteral() : {
   Token t;
}
{
    (t = <TRUE_LITERAL> | t = <FALSE_LITERAL>)
    {
        return Boolean.parseBoolean(t.image);
    }
}

String UnitsSpecification() : {
    Token t;
}
{
    t = <UNITS>
    {
        return t.image;
    }
}
