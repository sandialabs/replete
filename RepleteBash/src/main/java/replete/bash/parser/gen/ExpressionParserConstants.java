/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParserConstants.java */
package replete.bash.parser.gen;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 9;
  /** RegularExpression Id. */
  int EXPONENT = 10;
  /** RegularExpression Id. */
  int STRING_LITERAL = 11;
  /** RegularExpression Id. */
  int TRUE_LITERAL = 12;
  /** RegularExpression Id. */
  int FALSE_LITERAL = 13;
  /** RegularExpression Id. */
  int INDENTIFIER = 14;
  /** RegularExpression Id. */
  int LETTER = 15;
  /** RegularExpression Id. */
  int DIGIT = 16;
  /** RegularExpression Id. */
  int TICKMARK = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int NASSIGN = 19;
  /** RegularExpression Id. */
  int AASSIGN = 20;
  /** RegularExpression Id. */
  int SASSIGN = 21;
  /** RegularExpression Id. */
  int MASSIGN = 22;
  /** RegularExpression Id. */
  int DASSIGN = 23;
  /** RegularExpression Id. */
  int PASSIGN = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int SEMI = 26;
  /** RegularExpression Id. */
  int GT = 27;
  /** RegularExpression Id. */
  int LT = 28;
  /** RegularExpression Id. */
  int EQ = 29;
  /** RegularExpression Id. */
  int LE = 30;
  /** RegularExpression Id. */
  int GE = 31;
  /** RegularExpression Id. */
  int NE = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int PLUS = 35;
  /** RegularExpression Id. */
  int MINUS = 36;
  /** RegularExpression Id. */
  int MUL = 37;
  /** RegularExpression Id. */
  int DOT = 38;
  /** RegularExpression Id. */
  int DIV = 39;
  /** RegularExpression Id. */
  int MOD = 40;
  /** RegularExpression Id. */
  int NOT = 41;
  /** RegularExpression Id. */
  int POWER = 42;
  /** RegularExpression Id. */
  int CROSS = 43;
  /** RegularExpression Id. */
  int LSQ = 44;
  /** RegularExpression Id. */
  int RSQ = 45;
  /** RegularExpression Id. */
  int LRND = 46;
  /** RegularExpression Id. */
  int RRND = 47;
  /** RegularExpression Id. */
  int LBRC = 48;
  /** RegularExpression Id. */
  int RBRC = 49;
  /** RegularExpression Id. */
  int UNITS = 50;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_UNITS = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "<INDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"\\\'\"",
    "<ASSIGN>",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"^=\"",
    "\",\"",
    "\";\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\"^\"",
    "\"^^\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<UNITS>",
  };

}
