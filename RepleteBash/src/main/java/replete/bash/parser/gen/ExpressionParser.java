/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParser.java */
package replete.bash.parser.gen;

import java.io.StringReader;
import java.lang.reflect.Field;

import javax.measure.unit.Unit;

import replete.bash.evaluation.FunctionList;
import replete.util.ReflectionUtil;

/**
 * This parser attempts to be a relatively simple mathematical
 * expression parser.  The parser has support for these constructs:
 *  - numeric literals, integers, longs, floats, doubles, and e notation
 *  - boolean literals (true & false)
 *  - string literals
 *  - variables (identified by an identifier)
 *  - functions (identified by an identifier, (), and any arguments)
 *  - matrices (identified by [] and its elements)
 *  - array/matrix indexing (identified by var[idx(, idx)*])
 *  - mathematical && programming operators:
 *      mathematical: + - * / % (mod) ^ unary minus, unary plus
 *      logical: && || !
 *      equality: == !=
 *      relational: < > <= >=
 *      assignment: = += -= *= /=
 *      vector: . ^^ (dot, cross - not impl)
 *      grouping: ()
 *  - units (for physics applications)
 *
 * An identifier is a-zA-Z0-9 and can have _, $, and . in them.  They
 * cannot start with 0-9 nor a period (.).  They cannot end in a period.
 * They can end with any number of tick marks (single quotes, ') to identify
 * derivatives.
 *
 * Right now the units supported are all those supported by the JScience
 * library (SI prefixes are supported by JScience as well).  More units
 * can be added if necessary.
 *
 * This parser returns the root node of an abstract syntax tree that represents
 * the expression.
 *
 * Implicit multiplication is not supported ("x = 3y").  This is due to the
 * mixing of mathematical- and programming-language-related syntactical
 * concepts.  Namely, variables are supported like a programming language,
 * meaning 'x = yz' could either mean
 *    1) assign the value of the variable yz to x, or
 *    2) assign the value of the expression y * z to x
 * if this rule was not adopted.  Thus, 'x = yz' always implies #1, never #2.
 * Moreover, the expression 'b[2]' could wither mean
 *    1) the element at position 2 in the matrix b, or
 *    2) b multiplied by the matrix expression [2]
 * unless we remove implicit multiplication.
 *
 * Although this parser allows functions to have any name (e.g. "foobar(3, 4)"),
 * only those functions implemented in the application would allow a parsed
 * expression to be evaluated.  Unknown functions simply provide the tree
 * node for the function with an instance of UnknownFunction, which does not
 * evaluate.
 *
 * Assignment operators currently require that the left hand side operand be
 * either a variable, a function, or an array access.
 *
 * The parser is generated by the JTree extension on top of JavaCC which
 * automatically generates the AST classes for the developer.
 *
 * Future possibilities:
 *  - dot operator elevated to full operator, instead of identifier character
 *  - list indexing elevated to full operator, trailing any expression
 *  - left hand side of assignment operator does not need to be lvalue?
 *  - Or, at least disallow cos(3, 4) = <expr> from being a valid expression
 *    for consistency.
 *  - Ternary operator
 */

public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants, ExpressionParserConstants {/*@bgen(jjtree)*/
  protected JJTExpressionParserState jjtree = new JJTExpressionParserState();public static ASTNodeBase parse(String line) throws ParseException {
        if(line == null) {
            throw new IllegalArgumentException("Line to parse cannot be null.");
        }
        try {
            return parseInner(line);
        } catch(ParseException e) {
            // This is so any possible ParseException has its message
            // properly appended with the original equation text.
            String newMsg = e.getMessage().trim() + "\u005cnSource Line: " + line;
            ReflectionUtil.set(e, "detailMessage", newMsg);
            throw e;
        }
    }

    // Just used to wrap the inner parsing and TokenMgrError try/catch code for clarity.
    private static ASTNodeBase parseInner(String line) throws ParseException {
        try {
            ExpressionParser parser = new ExpressionParser(new StringReader(line + "\u005cn"));
            Node startNode = parser.Start();
            ASTNodeBase firstNode = (ASTNodeBase) startNode.jjtGetChild(0);
            firstNode.setSource(line);
            return firstNode;
        } catch(TokenMgrError err) {
            ParseException p = new ParseException(err.getMessage());
            try {
                Field f = Throwable.class.getDeclaredField("cause");
                f.setAccessible(true);
                f.set(p, err);
            } catch(Exception e) {}
            throw p;
        }
    }

    private String replaceEscape(String inputStr) {
        int len = inputStr.length();
        int p = 0;
        int i;
        String metachars = "tnrbf\u005c\u005c\u005c"'";
        String chars = "\u005ct\u005cn\u005cr\u005cb\u005cf\u005c\u005c\u005c"'";

        StringBuffer output = new StringBuffer();

        while((i = inputStr.indexOf('\u005c\u005c', p)) != -1) {
            output.append(inputStr.substring(p, i));

            if(i + 1 == len) {
                break;
            }

            // find metacharacter
            char metac = inputStr.charAt(i + 1);

            // find the index of the metac
            int k = metachars.indexOf(metac);
            if(k == -1) {
                // didn't find the metachar, leave sequence as found.
                // This code should be unreachable if the parser
                // is functioning properly because strings containing
                // unknown escape characters should not be accepted.
                output.append('\u005c\u005c');
                output.append(metac);
            } else {
                // its corresponding true char
                output.append(chars.charAt(k));
            }

            // skip over both escape character & metacharacter
            p = i + 2;
        }

        // add the end of the input string to the output
        if(p < len) {
            output.append(inputStr.substring(p));
        }

        return output.toString();
    }

    int checkMatrixCount(int first, int cur) throws ParseException {
        if(first == -1) {
            first = cur;
        } else if(cur != first) {
            throw new ParseException("Matrix does not have equal number of columns in each row.");
        }
        return first;
    }

/***************************************************************
GRAMMAR START
***************************************************************/
  final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) {
            return jjtn000;
        }}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
    if (jj_2_1(2147483647)) {
      AssignExpression();
    } else if (jj_2_2(1)) {
      RightExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AssignExpression() throws ParseException {
                                      /*@bgen(jjtree) #OpNode( 2) */
    ASTOpNode jjtn000 = new ASTOpNode(JJTOPNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      LValue();
      t = jj_consume_token(ASSIGN);
      Expression();
      jjtree.closeNodeScope(jjtn000,  2);
      jjtc000 = false;
        jjtn000.jjtSetValue(FunctionList.get(t.image));
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000,  2);
      }
    }
  }

  final public void RightExpression() throws ParseException {
    OrExpression();
  }

  final public void OrExpression() throws ParseException {
    AndExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(OR);
        AndExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_OR));
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void AndExpression() throws ParseException {
    EqualExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(AND);
        EqualExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_AND));
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
    }
  }

  final public void EqualExpression() throws ParseException {
    RelationalExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NE:
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(NE);
          RelationalExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_NE));
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case EQ:
          ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(EQ);
          RelationalExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
                jjtn002.jjtSetValue(FunctionList.get(FunctionList.OP_EQ));
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte002;
            }}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte002;
            }}
          }
          {if (true) {
            throw (Error)jjte002;
        }}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(LT);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_LT));
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case GT:
          ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(GT);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
                jjtn002.jjtSetValue(FunctionList.get(FunctionList.OP_GT));
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte002;
            }}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte002;
            }}
          }
          {if (true) {
            throw (Error)jjte002;
        }}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      case LE:
          ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(LE);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
                jjtn003.jjtSetValue(FunctionList.get(FunctionList.OP_LE));
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte003;
            }}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte003;
            }}
          }
          {if (true) {
            throw (Error)jjte003;
        }}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
        }
        break;
      case GE:
          ASTOpNode jjtn004 = new ASTOpNode(JJTOPNODE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(GE);
          AdditiveExpression();
              jjtree.closeNodeScope(jjtn004,  2);
              jjtc004 = false;
                jjtn004.jjtSetValue(FunctionList.get(FunctionList.OP_GE));
        } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte004;
            }}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte004;
            }}
          }
          {if (true) {
            throw (Error)jjte004;
        }}
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  2);
          }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
          MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_ADD));
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
        break;
      case MINUS:
          ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
          MultiplicativeExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
                jjtn002.jjtSetValue(FunctionList.get(FunctionList.OP_SUBTRACT));
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte002;
            }}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte002;
            }}
          }
          {if (true) {
            throw (Error)jjte002;
        }}
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_6:
    while (true) {
      if (jj_2_3(1)) {
        ;
      } else {
        break label_6;
      }
      if (jj_2_4(1)) {
          ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          PowerExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                {if (true) {
                    throw new ParseException("Implicit multiplication not allowed.");
                }}
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(MUL);
            UnaryExpression();
              jjtree.closeNodeScope(jjtn002,  2);
              jjtc002 = false;
                jjtn002.jjtSetValue(FunctionList.get(FunctionList.OP_MULTIPLY));
          } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte002;
            }}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte002;
            }}
          }
          {if (true) {
            throw (Error)jjte002;
        }}
          } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002,  2);
          }
          }
          break;
        case DOT:
          ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(DOT);
            UnaryExpression();
              jjtree.closeNodeScope(jjtn003,  2);
              jjtc003 = false;
                jjtn003.jjtSetValue(FunctionList.get(FunctionList.OP_DOT));
          } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte003;
            }}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte003;
            }}
          }
          {if (true) {
            throw (Error)jjte003;
        }}
          } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003,  2);
          }
          }
          break;
        case CROSS:
          ASTOpNode jjtn004 = new ASTOpNode(JJTOPNODE);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(CROSS);
            UnaryExpression();
              jjtree.closeNodeScope(jjtn004,  2);
              jjtc004 = false;
                jjtn004.jjtSetValue(FunctionList.get(FunctionList.OP_CROSS));
          } catch (Throwable jjte004) {
          if (jjtc004) {
            jjtree.clearNodeScope(jjtn004);
            jjtc004 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte004 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte004;
            }}
          }
          if (jjte004 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte004;
            }}
          }
          {if (true) {
            throw (Error)jjte004;
        }}
          } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004,  2);
          }
          }
          break;
        case DIV:
          ASTOpNode jjtn005 = new ASTOpNode(JJTOPNODE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
          try {
            jj_consume_token(DIV);
            UnaryExpression();
              jjtree.closeNodeScope(jjtn005,  2);
              jjtc005 = false;
                jjtn005.jjtSetValue(FunctionList.get(FunctionList.OP_DIVIDE));
          } catch (Throwable jjte005) {
          if (jjtc005) {
            jjtree.clearNodeScope(jjtn005);
            jjtc005 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte005 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte005;
            }}
          }
          if (jjte005 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte005;
            }}
          }
          {if (true) {
            throw (Error)jjte005;
        }}
          } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  2);
          }
          }
          break;
        case MOD:
          ASTOpNode jjtn006 = new ASTOpNode(JJTOPNODE);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
          try {
            jj_consume_token(MOD);
            UnaryExpression();
              jjtree.closeNodeScope(jjtn006,  2);
              jjtc006 = false;
                jjtn006.jjtSetValue(FunctionList.get(FunctionList.OP_MOD));
          } catch (Throwable jjte006) {
          if (jjtc006) {
            jjtree.clearNodeScope(jjtn006);
            jjtc006 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte006 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte006;
            }}
          }
          if (jjte006 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte006;
            }}
          }
          {if (true) {
            throw (Error)jjte006;
        }}
          } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006,  2);
          }
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* Unary Expression With Units:
   Units act as a post-fix operator with precedence
   higher than +, -, *, /, and %, but lower than
   ^, unary minus, unary plus, and element []. */
  final public void UnaryExpression() throws ParseException {
    String units = "";
    if (jj_2_5(2147483647)) {
      ASTUnitNode jjtn001 = new ASTUnitNode(JJTUNITNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        UnaryExpressionWithoutUnits();
        jj_consume_token(LBRC);
        units = UnitsSpecification();
        jj_consume_token(RBRC);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
            jjtn001.jjtSetValue(Unit.valueOf(units));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte001;
        }}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte001;
        }}
      }
      {if (true) {
        throw (Error)jjte001;
    }}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else if (jj_2_6(1)) {
      UnaryExpressionWithoutUnits();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void UnaryExpressionWithoutUnits() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(PLUS);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn001,  1);
          jjtc001 = false;
            jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_UPLUS));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte001;
        }}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte001;
        }}
      }
      {if (true) {
        throw (Error)jjte001;
    }}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  1);
      }
      }
      break;
    case MINUS:
      ASTOpNode jjtn002 = new ASTOpNode(JJTOPNODE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(MINUS);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn002,  1);
          jjtc002 = false;
            jjtn002.jjtSetValue(FunctionList.get(FunctionList.OP_UMINUS));
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte002;
        }}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte002;
        }}
      }
      {if (true) {
        throw (Error)jjte002;
    }}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
      }
      }
      break;
    case NOT:
      ASTOpNode jjtn003 = new ASTOpNode(JJTOPNODE);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(NOT);
        UnaryExpression();
          jjtree.closeNodeScope(jjtn003,  1);
          jjtc003 = false;
            jjtn003.jjtSetValue(FunctionList.get(FunctionList.OP_NOT));
      } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte003;
        }}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte003;
        }}
      }
      {if (true) {
        throw (Error)jjte003;
    }}
      } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003,  1);
      }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_7(1)) {
        PowerExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PowerExpression() throws ParseException {
    UnaryExpressionNotPlusMinus();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
          ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(POWER);
        UnaryExpression();
              jjtree.closeNodeScope(jjtn001,  2);
              jjtc001 = false;
                jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_POWER));
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) {
                throw (RuntimeException)jjte001;
            }}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) {
                throw (ParseException)jjte001;
            }}
          }
          {if (true) {
            throw (Error)jjte001;
        }}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case STRING_LITERAL:
    case TRUE_LITERAL:
    case FALSE_LITERAL:
      AnyConstant();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_8(2147483647)) {
        ArrayAccess();
      } else if (getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND) {
        Function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INDENTIFIER:
          Variable();
          break;
        case LRND:
          jj_consume_token(LRND);
          Expression();
          jj_consume_token(RRND);
          break;
        case LSQ:
          MatrixExpression();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ListExpression() throws ParseException {
                                   /*@bgen(jjtree) ListNode */
    ASTListNode jjtn000 = new ASTListNode(JJTLISTNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);jjtn000.jjtSetValue("LIST");
    try {
      jj_consume_token(LSQ);
      Expression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        Expression();
      }
      jj_consume_token(RSQ);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MatrixExpression() throws ParseException {
                                       /*@bgen(jjtree) MatrixNode */
    ASTMatrixNode jjtn000 = new ASTMatrixNode(JJTMATRIXNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);jjtn000.jjtSetValue("MATRIX");
    try {
        int firstRowElemCount = -1;
        int rowElemCount = 0;
        int rowCount = 0;
      jj_consume_token(LSQ);
      Expression();
                      rowElemCount++; rowCount++;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
        case SEMI:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          Expression();
                                  rowElemCount++;
          break;
        case SEMI:
          jj_consume_token(SEMI);
          Expression();
                firstRowElemCount = checkMatrixCount(firstRowElemCount, rowElemCount);
                rowElemCount = 1;
                rowCount++;
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RSQ);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        // COMMENTED OUT FROM ABOVE DUE TO CONFLICTS WITH +/-: | Expression() {rowElemCount++;}
        firstRowElemCount = checkMatrixCount(firstRowElemCount, rowElemCount);
        jjtn000.setDimensions(rowCount, firstRowElemCount);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void LValue() throws ParseException {
   String units = "";
    if (jj_2_9(2147483647)) {
      ASTUnitNode jjtn001 = new ASTUnitNode(JJTUNITNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      try {
        LValueWithoutUnits();
        jj_consume_token(LBRC);
        units = UnitsSpecification();
        jj_consume_token(RBRC);
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
            jjtn001.jjtSetValue(Unit.valueOf(units));
      } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte001;
        }}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte001;
        }}
      }
      {if (true) {
        throw (Error)jjte001;
    }}
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENTIFIER:
        LValueWithoutUnits();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LValueWithoutUnits() throws ParseException {
    if (jj_2_10(2147483647)) {
      ArrayAccess();
    } else if (jj_2_11(2147483647)) {
      Function();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INDENTIFIER:
        Variable();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ArrayAccess() throws ParseException {
    Variable();
    ListExpression();
      ASTOpNode jjtn001 = new ASTOpNode(JJTOPNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      jjtree.closeNodeScope(jjtn001,  2);
      jjtc001 = false;
        jjtn001.jjtSetValue(FunctionList.get(FunctionList.OP_ELEMENT));
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
      }
    }
  }

  final public void Variable() throws ParseException {
                            /*@bgen(jjtree) VarNode */
    ASTVarNode jjtn000 = new ASTVarNode(JJTVARNODE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String identString = "";
    try {
      identString = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.jjtSetValue(identString);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Function() throws ParseException {
    String identString = "";
      ASTFunNode jjtn001 = new ASTFunNode(JJTFUNNODE);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      identString = Identifier();
            jjtn001.jjtSetValue(FunctionList.getOrUnknown(identString));
      jj_consume_token(LRND);
      ArgumentList();
      jj_consume_token(RRND);
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte001;
        }}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte001;
        }}
      }
      {if (true) {
        throw (Error)jjte001;
    }}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
  }

  final public void ArgumentList() throws ParseException {
    if (jj_2_12(1)) {
      Expression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } else {
      ;
    }
  }

  final public String Identifier() throws ParseException {
  Token t;
    t = jj_consume_token(INDENTIFIER);
        {if (true) {
            return t.image;
        }}
    throw new Error("Missing return statement in function");
  }

  final public void AnyConstant() throws ParseException {
                                /*@bgen(jjtree) Constant */
    ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    Object value;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        String temp = t.image.substring(1, t.image.length() - 1);
        temp = replaceEscape(temp);
        jjtn000.jjtSetValue(temp);
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
        value = RealConstant();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.jjtSetValue(value);
        break;
      case TRUE_LITERAL:
      case FALSE_LITERAL:
        value = BooleanLiteral();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.jjtSetValue(value);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) {
            throw (RuntimeException)jjte000;
        }}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) {
            throw (ParseException)jjte000;
        }}
      }
      {if (true) {
        throw (Error)jjte000;
    }}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Object RealConstant() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
        {if (true) {
            return Long.parseLong(t.image);
        }}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
        {if (true) {
            return Double.parseDouble(t.image);
        }}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Boolean BooleanLiteral() throws ParseException {
   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE_LITERAL:
      t = jj_consume_token(TRUE_LITERAL);
      break;
    case FALSE_LITERAL:
      t = jj_consume_token(FALSE_LITERAL);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) {
            return Boolean.parseBoolean(t.image);
        }}
    throw new Error("Missing return statement in function");
  }

  final public String UnitsSpecification() throws ParseException {
    Token t;
    t = jj_consume_token(UNITS);
        {if (true) {
            return t.image;
        }}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(LT)) {
        return true;
    }
    if (jj_3R_59()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
        return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_59()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(SEMI)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(EQ)) {
        return true;
    }
    if (jj_3R_55()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(COMMA)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(COMMA)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NE)) {
        return true;
    }
    if (jj_3R_55()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_55()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LSQ)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_65()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQ)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(AND)) {
        return true;
    }
    if (jj_3R_49()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(LSQ)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RSQ)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_19()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(OR)) {
        return true;
    }
    if (jj_3R_39()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_51()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LRND)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    if (jj_scan_token(RRND)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_30()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_39()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_21()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_19()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_25()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == INDENTIFIER && getToken(2).kind == LRND;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
        return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_50()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(POWER)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) {
        return true;
    }
    if (jj_scan_token(ASSIGN)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_10()) {
        return true;
    }
    if (jj_scan_token(ASSIGN)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_26()) {
        return true;
    }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
        jj_scanpos = xsp;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_48()) {
        return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_17()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(UNITS)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(NOT)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(MINUS)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(PLUS)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
        return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_18()) {
        return true;
    }
    if (jj_scan_token(LBRC)) {
        return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_18()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(INTEGER_LITERAL)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_18()) {
        return true;
    }
    if (jj_scan_token(LBRC)) {
        return true;
    }
    if (jj_3R_38()) {
        return true;
    }
    if (jj_scan_token(RBRC)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_61()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(MOD)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_60()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(DIV)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
        return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(STRING_LITERAL)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(COMMA)) {
        return true;
    }
    if (jj_3R_22()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(CROSS)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(DOT)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(INDENTIFIER)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(MUL)) {
        return true;
    }
    if (jj_3R_46()) {
        return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_22()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
        jj_scanpos = xsp;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_17()) {
        return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
        return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_46()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_35()) {
        return true;
    }
    if (jj_scan_token(LRND)) {
        return true;
    }
    if (jj_3R_36()) {
        return true;
    }
    if (jj_scan_token(RRND)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(MINUS)) {
        return true;
    }
    if (jj_3R_62()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_35()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(PLUS)) {
        return true;
    }
    if (jj_3R_62()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
        return true;
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_21()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_62()) {
        return true;
    }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_19()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_30()) {
        return true;
    }
    if (jj_3R_31()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(GE)) {
        return true;
    }
    if (jj_3R_59()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_30()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_21()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_19()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
        return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(LE)) {
        return true;
    }
    if (jj_3R_59()) {
        return true;
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_20()) {
        return true;
    }
    if (jj_scan_token(LBRC)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_20()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(GT)) {
        return true;
    }
    if (jj_3R_59()) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_20()) {
        return true;
    }
    if (jj_scan_token(LBRC)) {
        return true;
    }
    if (jj_3R_38()) {
        return true;
    }
    if (jj_scan_token(RBRC)) {
        return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
        return true;
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ExpressionParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x20000000,0x20000000,0xd8000000,0xd8000000,0x0,0x0,0x0,0x0,0x0,0x3a80,0x4000,0x2000000,0x6000000,0x6000000,0x4000,0x4000,0x2000000,0x3a80,0x280,0x3000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x2,0x1,0x1,0x0,0x0,0x18,0x18,0x9e0,0x218,0x400,0x0,0x5000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  /** Constructor. */
  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  /** Constructor with generated Token Manager. */
  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  /** Reinitialise. */
  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) {
        jj_la1[i] = -1;
    }
    for (int i = 0; i < jj_2_rtns.length; i++) {
        jj_2_rtns[i] = new JJCalls();
    }
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) {
        token = token.next;
    } else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) {
                c.first = null;
            }
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) {
        jj_add_error_token(kind, i);
    }
    }
    if (jj_scanpos.kind != kind) {
        return true;
    }
    if (jj_la == 0 && jj_scanpos == jj_lastpos) {
        throw jj_ls;
    }
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) {
        token = token.next;
    } else {
        token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) {
        t = t.next;
    } else {
        t = t.next = token_source.getNextToken();
    }
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null) {
        return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    } else {
        return (jj_ntk = jj_nt.kind);
    }
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
        return;
    }
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
